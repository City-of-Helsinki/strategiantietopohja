<?php

/**
 * @file
 * Contains helstra_phenomenon.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function helstra_phenomenon_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the helstra_phenomenon module.
    case 'help.page.helstra_phenomenon':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides customization for phenomenons') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 */
function helstra_phenomenon_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  // Perform alterations to liftup_with_image paragraph.
  if ($element['#paragraph_type'] == 'liftup_with_image') {
    // Design selection.
    $design_select = 'select[name="field_content[' . $element['#delta'] . '][subform][field_liftup_with_image_design]"';
    // Hide design selection field, defaults to image-on-right. 
    // TODO: instead of hiding, make this limit options to
    //  image-on-right|Kuva oikealla
    //  image-on-left|Kuva vasemmalla
    $element['subform']['field_liftup_with_image_design'] = [];
  }
}

/**
 * Implements hook_entity_access().
 */
function helstra_phenomenon_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  // Restrict access to path "fi/tilannekuva" by IP or authentication.
  if (\Drupal::currentUser()->isAuthenticated()) {
  
  } else {
    if ($entity->bundle() == 'phenomenon') {
      $path = $entity->toUrl()->toString();
      if (substr($path, 0, 15 ) == "/fi/tilannekuva") {
        $ip = \Drupal::request()->getClientIp();
        if (substr($ip, 0, 8 ) == "137.163.") {
          \Drupal::service('page_cache_kill_switch')->trigger();
          \Drupal::logger('helstra_phenomenon')->error('Access granted from: ' . $ip);
          $access_result = \Drupal\Core\Access\AccessResult::allowed();
          $access_result->setCacheMaxAge(0);
          $access_result->resetCacheContexts();
          $access_result->addCacheContexts(['ip']);
          return $access_result;
        } else {
          \Drupal::logger('helstra_phenomenon')->error('Access denied from: ' . $ip);
          $access_result = \Drupal\Core\Access\AccessResult::forbidden();
          $access_result->setCacheMaxAge(0);
          $access_result->resetCacheContexts();
          $access_result->addCacheContexts(['ip']);
          return $access_result;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function helstra_phenomenon_preprocess_node__phenomenon(&$variables) {
  // Don't cache path "fi/tilannekuva".
  $node = $variables['node'];
  $path = $node->toUrl()->toString();
  if (substr($path, 0, 15 ) == "/fi/tilannekuva") {
    $variables['#cache']['contexts'][] = 'ip';
  }
}

/**
 * Implements hook_theme().
 */
function helstra_phenomenon_theme() {
  return [
    'helstra_phenomenon' => [
      'render element' => 'children',
    ],
    'helstra_phenomenon_field_grid' => [
      'variables' => [
        'content' => NULL,
        'count' => NULL
      ],
    ],
    'helstra_phenomenon_field_list' => [
      'variables' => [
        'content' => NULL,
        'count' => NULL
      ]
    ]
  ];
}
